name: ðŸš€ Build & Release
on:
  push:
    branches:
      - main
jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      yarn-cache-dir-path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
    steps:
      - uses: google-github-actions/release-please-action@v2
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: manifest
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-node_modules
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

  release-publish:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created && success() }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ngaox-Chaospad
            distPath: dist/chaospad
            buildScript: yarn build:chaospad
          - name: Ngaox-SEO
            distPath: dist/seo
            buildScript: yarn build:seo
          - name: Ngaox-Icons
            distPath: dist/icons
            buildScript: yarn build:icons
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ needs.release-please.outputs.yarn-cache-dir-path }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-node_modules
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build ${{ matrix.name }}
        run: ${{ matrix.buildScript }}
      - name: ðŸŽ‰ Publishing @ngaox/${{ matrix.name }} to npm
        id: publish
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
          access: public
          package: ${{ matrix.distPath }}/package.json
      - if: steps.publish.outputs.type != 'none'
        run: |
          echo "Version changed: ${{ steps.publish.outputs.old-version }} => ${{ steps.publish.outputs.version }}"
      - name: Zip package dist folder
        run: zip -r ${{ matrix.distPath }}.zip ${{ matrix.distPath }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release-please.outputs.upload_url }}
          asset_path: ${{ matrix.distPath }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip
      - run: |
          echo "Asset Uploaded!"
          echo "\tID: ${{ steps.upload-release-asset.outputs.id }}"
          echo "\tDownload-Url: ${{ steps.upload-release-asset.outputs.browser_download_url }}"

  git-tagging:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created && success() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Tag major and minor versions
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git remote add gh-token "https://${{ secrets.GITHUB_TOKEN }}@github.com/google-github-actions/release-please-action.git"
          git tag -d v${{ needs.release-please.outputs.major }} || true
          git tag -d v${{ needs.release-please.outputs.major }}.${{ needs.release-please.outputs.minor }} || true
          git push origin :v${{ needs.release-please.outputs.major }} || true
          git push origin :v${{ needs.release-please.outputs.major }}.${{ needs.release-please.outputs.minor }} || true
          git tag -a v${{ needs.release-please.outputs.major }} -m "Release v${{ needs.release-please.outputs.major }}"
          git tag -a v${{ needs.release-please.outputs.major }}.${{ needs.release-please.outputs.minor }} -m "Release v${{ needs.release-please.outputs.major }}.${{ needs.release-please.outputs.minor }}"
          git push origin v${{ needs.release-please.outputs.major }}
          git push origin v${{ needs.release-please.outputs.major }}.${{ needs.release-please.outputs.minor }}
